generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  NORMAL
  ADMIN
}

enum ProjectType {
  FIXED
  RETAINER
}

model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  googleId    String?
  avatar      String?
  role        UserRole   @default(NORMAL)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  activityIDs String[]   @db.ObjectId
  Activity    Activity[] @relation(fields: [activityIDs], references: [id])
  projectIDs  String[]   @db.ObjectId
  Project     Project[]  @relation(fields: [projectIDs], references: [id])
  Timecard    Timecard[]
}

model Client {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Project   Project[]
}

model Project {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ProjectType
  granular  Boolean     @default(false)
  billable  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  clientId  String      @db.ObjectId
  Client    Client      @relation(fields: [clientId], references: [id])
  startDate DateTime?
  endDate   DateTime?
  userIDs   String[]    @db.ObjectId
  User      User[]      @relation(fields: [userIDs], references: [id])
  Milestone Milestone[]
  Timecard  Timecard[]
}

model Milestone {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  projectId String     @db.ObjectId
  Project   Project    @relation(fields: [projectId], references: [id])
  startDate DateTime
  Timecard  Timecard[]
}

model Activity {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userIDs   String[]   @db.ObjectId
  User      User[]     @relation(fields: [userIDs], references: [id])
  Timecard  Timecard[]
}

model Timecard {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  User        User      @relation(fields: [userId], references: [id])
  date        DateTime
  logMintues  Int // in minutes
  notes       String
  projectId   String    @db.ObjectId
  Project     Project   @relation(fields: [projectId], references: [id])
  milestoneId String    @db.ObjectId
  Milestone   Milestone @relation(fields: [milestoneId], references: [id])
  activityId  String    @db.ObjectId
  Activity    Activity  @relation(fields: [activityId], references: [id])
}
